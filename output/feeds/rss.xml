<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Forkbomb Blog</title><link>http://dkharitonov.me/</link><description></description><atom:link href="http://dkharitonov.me/feeds/rss.xml" rel="self"></atom:link><lastBuildDate>Wed, 26 Aug 2015 17:00:00 +0300</lastBuildDate><item><title>Грамотно собираем и конфигурируем nginx</title><link>http://dkharitonov.me/blog/nginx-setup</link><description>&lt;p&gt;В&amp;nbsp;данной заметке я&amp;nbsp;покажу как скомпилировать nginx из&amp;nbsp;исходников с&amp;nbsp;необходимыми модулями, а&amp;nbsp;также довольно тонко настроить параметры сервера. Некоторые вещи в&amp;nbsp;конфиге специфичны и&amp;nbsp;подойдут далеко не&amp;nbsp;для всех задач, так что аккуратно и&amp;nbsp;внимательно с&amp;nbsp;этапом настройки. Эта конфигурация хорошо подойдет для использования на&amp;nbsp;Raspberry Pi. &lt;/p&gt;
&lt;p&gt;Получим рута, доставим необходимые для сборки пакеты и&amp;nbsp;создадим файл скрипта:&lt;/p&gt;
&lt;table class="codehilitetable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1
2
3&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="codehilite"&gt;&lt;pre&gt;su root
apt-get -y install curl wget build-essential libz-dev libssl-dev
nano /tmp/build_nginx.sh
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;Тело скрипта: &lt;/p&gt;
&lt;table class="codehilitetable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
69
70
71
72
73
74
75
76
77
78
79&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="c"&gt;#!/usr/bin/env bash&lt;/span&gt;

&lt;span class="c"&gt;# Почти полная копия скрипта https://gist.github.com/MattWilcox/402e2e8aa2e1c132ee24&lt;/span&gt;
&lt;span class="c"&gt;# с некоторыми модификациями&lt;/span&gt;

&lt;span class="nb"&gt;export &lt;/span&gt;&lt;span class="nv"&gt;VERSION_PCRE&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;pcre-8.37
&lt;span class="c"&gt;# Посмотрите номер последней версии openssl здесь https://www.openssl.org/news/changelog.html&lt;/span&gt;
&lt;span class="nb"&gt;export &lt;/span&gt;&lt;span class="nv"&gt;VERSION_OPENSSL&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;openssl-1.0.2d
&lt;span class="c"&gt;# Номер последней версии nginx здесь http://nginx.org/en/download.html&lt;/span&gt;
&lt;span class="nb"&gt;export &lt;/span&gt;&lt;span class="nv"&gt;VERSION_NGINX&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;nginx-1.9.4

&lt;span class="c"&gt;# Адреса откуда качать исходники&lt;/span&gt;
&lt;span class="nb"&gt;export &lt;/span&gt;&lt;span class="nv"&gt;SOURCE_OPENSSL&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;https://www.openssl.org/source/
&lt;span class="nb"&gt;export &lt;/span&gt;&lt;span class="nv"&gt;SOURCE_PCRE&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;ftp://ftp.csx.cam.ac.uk/pub/software/programming/pcre/
&lt;span class="nb"&gt;export &lt;/span&gt;&lt;span class="nv"&gt;SOURCE_NGINX&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;http://nginx.org/download/

&lt;span class="c"&gt;# Переменная с датой для бекапа текущих настроек nginx&lt;/span&gt;
&lt;span class="nv"&gt;today&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;date +&lt;span class="s2"&gt;&amp;quot;%Y-%m-%d&amp;quot;&lt;/span&gt;&lt;span class="k"&gt;)&lt;/span&gt;

&lt;span class="c"&gt;# Почистим директории, которые могли остаться после предыдущего запуска скрипта&lt;/span&gt;
rm -rf build
rm -rf /etc/nginx-default
mkdir build

&lt;span class="c"&gt;# Качаем исходники&lt;/span&gt;
wget -P ./build &lt;span class="nv"&gt;$SOURCE_PCRE$VERSION_PCRE&lt;/span&gt;.tar.gz
wget -P ./build &lt;span class="nv"&gt;$SOURCE_OPENSSL$VERSION_OPENSSL&lt;/span&gt;.tar.gz --no-check-certificate
wget -P ./build &lt;span class="nv"&gt;$SOURCE_NGINX$VERSION_NGINX&lt;/span&gt;.tar.gz

&lt;span class="c"&gt;# Разархивируем их&lt;/span&gt;
&lt;span class="nb"&gt;cd &lt;/span&gt;build
tar xzf &lt;span class="nv"&gt;$VERSION_NGINX&lt;/span&gt;.tar.gz
tar xzf &lt;span class="nv"&gt;$VERSION_OPENSSL&lt;/span&gt;.tar.gz
tar xzf &lt;span class="nv"&gt;$VERSION_PCRE&lt;/span&gt;.tar.gz
&lt;span class="nb"&gt;cd&lt;/span&gt; ../

&lt;span class="c"&gt;# Указываем директории, в которых будем компилить nginx и openssl&lt;/span&gt;
&lt;span class="nb"&gt;export &lt;/span&gt;&lt;span class="nv"&gt;BPATH&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;&lt;span class="nb"&gt;pwd&lt;/span&gt;&lt;span class="k"&gt;)&lt;/span&gt;/build
&lt;span class="nb"&gt;export &lt;/span&gt;&lt;span class="nv"&gt;STATICLIBSSL&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="nv"&gt;$BPATH&lt;/span&gt;&lt;span class="s2"&gt;/staticlibssl&amp;quot;&lt;/span&gt;

&lt;span class="c"&gt;# Компилим openssl&lt;/span&gt;
&lt;span class="nb"&gt;cd&lt;/span&gt; &lt;span class="nv"&gt;$BPATH&lt;/span&gt;/&lt;span class="nv"&gt;$VERSION_OPENSSL&lt;/span&gt;
rm -rf &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="nv"&gt;$STATICLIBSSL&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;
mkdir &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="nv"&gt;$STATICLIBSSL&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;
make clean
./config --prefix&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nv"&gt;$STATICLIBSSL&lt;/span&gt; no-shared &lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; make depend &lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; make &lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; make install_sw

&lt;span class="c"&gt;# Бекапим текущие исходники nginx&lt;/span&gt;
mv /etc/nginx /etc/nginx-&lt;span class="nv"&gt;$today&lt;/span&gt;

&lt;span class="c"&gt;# Собираем nginx&lt;/span&gt;
&lt;span class="c"&gt;# Указан небольшой перечень модулей. Если вам нужны дополнительные, список можно посмотреть здесь&lt;/span&gt;
&lt;span class="c"&gt;# http://wiki.nginx.org/Modules&lt;/span&gt;
&lt;span class="nb"&gt;cd&lt;/span&gt; &lt;span class="nv"&gt;$BPATH&lt;/span&gt;/&lt;span class="nv"&gt;$VERSION_NGINX&lt;/span&gt;
mkdir -p &lt;span class="nv"&gt;$BPATH&lt;/span&gt;/nginx
./configure --with-cc-opt&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;-I &lt;/span&gt;&lt;span class="nv"&gt;$STATICLIBSSL&lt;/span&gt;&lt;span class="s2"&gt;/include -I/usr/include&amp;quot;&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
--with-ld-opt&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;-L &lt;/span&gt;&lt;span class="nv"&gt;$STATICLIBSSL&lt;/span&gt;&lt;span class="s2"&gt;/lib -Wl,-rpath=&lt;/span&gt;&lt;span class="nv"&gt;$STATICLIBSSL&lt;/span&gt;&lt;span class="s2"&gt;/lib -lssl -lcrypto -ldl -lz&amp;quot;&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
--sbin-path&lt;span class="o"&gt;=&lt;/span&gt;/usr/sbin/nginx &lt;span class="se"&gt;\&lt;/span&gt;
--conf-path&lt;span class="o"&gt;=&lt;/span&gt;/etc/nginx/nginx.conf &lt;span class="se"&gt;\&lt;/span&gt;
--pid-path&lt;span class="o"&gt;=&lt;/span&gt;/var/run/nginx.pid &lt;span class="se"&gt;\&lt;/span&gt;
--error-log-path&lt;span class="o"&gt;=&lt;/span&gt;/var/log/nginx/error.log &lt;span class="se"&gt;\&lt;/span&gt;
--http-log-path&lt;span class="o"&gt;=&lt;/span&gt;/var/log/nginx/access.log &lt;span class="se"&gt;\&lt;/span&gt;
--with-pcre&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nv"&gt;$BPATH&lt;/span&gt;/&lt;span class="nv"&gt;$VERSION_PCRE&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
--with-http_ssl_module &lt;span class="se"&gt;\&lt;/span&gt;
--with-file-aio &lt;span class="se"&gt;\&lt;/span&gt;
--with-http_gzip_static_module &lt;span class="se"&gt;\&lt;/span&gt;
--without-mail_pop3_module &lt;span class="se"&gt;\&lt;/span&gt;
--without-mail_smtp_module &lt;span class="se"&gt;\&lt;/span&gt;
--without-mail_imap_module &lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; make &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; make install

&lt;span class="c"&gt;# Переименуем директорию с новыми дефолтными конфигами&lt;/span&gt;
mv /etc/nginx /etc/nginx-default

&lt;span class="c"&gt;# Вернем конфиги из бекапа&lt;/span&gt;
mv /etc/nginx-&lt;span class="nv"&gt;$today&lt;/span&gt; /etc/nginx
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;Запустим процесс компиляции и&amp;nbsp;пойдем пить чай. Много чая.&lt;/p&gt;
&lt;table class="codehilitetable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="codehilite"&gt;&lt;pre&gt;chmod +x /tmp/build_nginx.sh &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; /tmp/build_nginx.sh
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;Если ранее уже был установлен nginx, скрипт вернул старые конфиги и&amp;nbsp;все продолжит работать как раньше. Если нет, подготовимся к&amp;nbsp;его настройке:&lt;/p&gt;
&lt;table class="codehilitetable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1
2
3
4
5
6
7
8
9&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="c"&gt;# Создадим пользователя, от которого будет запускаться nginx&lt;/span&gt;
useradd nginx
groupadd nginx
usermod -g nginx -G www-data nginx

&lt;span class="c"&gt;# И директорию для сайтов&lt;/span&gt;
mkdir /var/www
chmod -R &lt;span class="m"&gt;775&lt;/span&gt; /var/www
chown -R www-data:www-data /var/www
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;Приступим к&amp;nbsp;конфигурированию:&lt;/p&gt;
&lt;table class="codehilitetable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1
2
3
4
5&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="c"&gt;# Скопируем дефолтные конфиги&lt;/span&gt;
cp -R /etc/nginx-default /etc/nginx

&lt;span class="c"&gt;# И начнем править&lt;/span&gt;
nano /etc/nginx/nginx.conf
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;Удалим все из&amp;nbsp;конфига и&amp;nbsp;создадим такой:&lt;/p&gt;
&lt;table class="codehilitetable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
69
70
71
72
73
74
75
76
77
78
79
80
81
82
83
84
85
86
87
88
89
90
91
92
93
94
95
96&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="c1"&gt;# Пользователь, от которого будет запускаться nginx&lt;/span&gt;
&lt;span class="k"&gt;user&lt;/span&gt;              &lt;span class="s"&gt;nginx&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="c1"&gt;# Рекомендуется выставлять по количеству ядер в системе&lt;/span&gt;
&lt;span class="c1"&gt;# Можно узнать командой nproc&lt;/span&gt;
&lt;span class="k"&gt;worker_processes&lt;/span&gt;  &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="c1"&gt;# Путь до файла с логами ошибок&lt;/span&gt;
&lt;span class="k"&gt;error_log&lt;/span&gt;  &lt;span class="s"&gt;/var/log/nginx/error.log&lt;/span&gt; &lt;span class="s"&gt;warn&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="c1"&gt;# Здесь будет храниться id процесса nginx&lt;/span&gt;
&lt;span class="k"&gt;pid&lt;/span&gt;        &lt;span class="s"&gt;/var/run/nginx.pid&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;events&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;# Говорит, сколько коннектов может обрабатывать 1 процесс&lt;/span&gt;
  &lt;span class="c1"&gt;# Число можно узнать командой ulimit -n&lt;/span&gt;
  &lt;span class="kn"&gt;worker_connections&lt;/span&gt;  &lt;span class="mi"&gt;1024&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;http&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;# Дополнительную информацию можно получить тут&lt;/span&gt;
  &lt;span class="c1"&gt;# http://nginx.org/ru/docs/http/ngx_http_core_module.html&lt;/span&gt;

  &lt;span class="c1"&gt;# Соответствие MIME типов файлов их расширениям&lt;/span&gt;
  &lt;span class="kn"&gt;include&lt;/span&gt;       &lt;span class="s"&gt;/etc/nginx/mime.types&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="c1"&gt;# Тип по умолчанию — бинарный файл без формата&lt;/span&gt;
  &lt;span class="kn"&gt;default_type&lt;/span&gt;  &lt;span class="s"&gt;application/octet-stream&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="c1"&gt;# Лог файл, где будут храниться логи доступа к ресурсам сайта&lt;/span&gt;
  &lt;span class="kn"&gt;access_log&lt;/span&gt; &lt;span class="s"&gt;/var/log/nginx/access.log&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="c1"&gt;# Если вам это неважно, можно отключить ведение этих логов&lt;/span&gt;
  &lt;span class="c1"&gt;#access_log  off;&lt;/span&gt;

  &lt;span class="c1"&gt;# Отдаем файлы напрямую, без лишего копирования веб-сервером&lt;/span&gt;
  &lt;span class="kn"&gt;sendfile&lt;/span&gt;     &lt;span class="no"&gt;on&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="c1"&gt;# Выводим данные полными пакетами &lt;/span&gt;
  &lt;span class="kn"&gt;tcp_nopush&lt;/span&gt;   &lt;span class="no"&gt;on&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="c1"&gt;# Убираем задержку при передаче последнего пакета, если соединение не закрывается&lt;/span&gt;
  &lt;span class="kn"&gt;tcp_nodelay&lt;/span&gt;  &lt;span class="no"&gt;on&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="c1"&gt;# Для отдачи относительно больших файлов,&lt;/span&gt;
  &lt;span class="c1"&gt;# будем использовать прямое чтение, без обращения в кэш ОС&lt;/span&gt;
  &lt;span class="kn"&gt;directio&lt;/span&gt;     &lt;span class="mi"&gt;5m&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="c1"&gt;# Настройки в секции позволяют повысить производительность&lt;/span&gt;
  &lt;span class="c1"&gt;# При неожиданном поведении, следует увеличить числа&lt;/span&gt;
  &lt;span class="c1"&gt;# Снизим таймаут отдачи body клиенту&lt;/span&gt;
  &lt;span class="kn"&gt;client_body_timeout&lt;/span&gt;    &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="c1"&gt;# Снизим таймаут отдачи заголовков клиенту &lt;/span&gt;
  &lt;span class="kn"&gt;client_header_timeout&lt;/span&gt;  &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="c1"&gt;# Установим время жизни соединения клиента, а также будем возвращать соответствующий заголовок&lt;/span&gt;
  &lt;span class="kn"&gt;keepalive_timeout&lt;/span&gt;      &lt;span class="mi"&gt;5&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="c1"&gt;# Установим время ожидания ответа клиенту&lt;/span&gt;
  &lt;span class="kn"&gt;send_timeout&lt;/span&gt;           &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="c1"&gt;# Секция позволяет снизить вред от атаки типа &amp;quot;переполнение буфера&amp;quot;&lt;/span&gt;
  &lt;span class="c1"&gt;# Нужно быть аккуратнее с числами, иначе можно столкнуться с неожиданным поведением&lt;/span&gt;
  &lt;span class="c1"&gt;# Размер буфера для body запроса клиента&lt;/span&gt;
  &lt;span class="kn"&gt;client_body_buffer_size&lt;/span&gt;      &lt;span class="s"&gt;1K&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="c1"&gt;# Размер буфера для заголовка запроса клиента&lt;/span&gt;
  &lt;span class="c1"&gt;# Нужно увеличить размер, если собираемся принимать кастомные заголовки или большие куки&lt;/span&gt;
  &lt;span class="kn"&gt;client_header_buffer_size&lt;/span&gt;    &lt;span class="mi"&gt;1k&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="c1"&gt;# Если не будем поддерживать загрузку файлов через POST, установим максимальный размер body&lt;/span&gt;
  &lt;span class="kn"&gt;client_max_body_size&lt;/span&gt;         &lt;span class="mi"&gt;1k&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="c1"&gt;# Установим максимальное количество и размер этих буферов для чтения заголовков клиента&lt;/span&gt;
  &lt;span class="kn"&gt;large_client_header_buffers&lt;/span&gt;  &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="mi"&gt;1k&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="c1"&gt;# Не посылать номер версии nginx в заголовках&lt;/span&gt;
  &lt;span class="kn"&gt;server_tokens&lt;/span&gt;  &lt;span class="no"&gt;off&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="c1"&gt;# Запретить помещать наши страницы во фреймы&lt;/span&gt;
  &lt;span class="kn"&gt;add_header&lt;/span&gt;     &lt;span class="s"&gt;X-Frame-Options&lt;/span&gt; &lt;span class="s"&gt;SAMEORIGIN&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="c1"&gt;# Отключаем content-type sniffing &lt;/span&gt;
  &lt;span class="c1"&gt;# https://www.owasp.org/index.php/List_of_useful_HTTP_headers&lt;/span&gt;
  &lt;span class="kn"&gt;add_header&lt;/span&gt;     &lt;span class="s"&gt;X-Content-Type-Options&lt;/span&gt; &lt;span class="s"&gt;nosniff&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="c1"&gt;# Включаем XSS фильтер в браузерах&lt;/span&gt;
  &lt;span class="kn"&gt;add_header&lt;/span&gt;     &lt;span class="s"&gt;X-XSS-Protection&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="kn"&gt;mode=block&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="c1"&gt;# Включаем сжатие трафика&lt;/span&gt;
  &lt;span class="c1"&gt;# http://nginx.org/ru/docs/http/ngx_http_gzip_module.html&lt;/span&gt;
  &lt;span class="kn"&gt;gzip&lt;/span&gt;               &lt;span class="no"&gt;on&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; 
  &lt;span class="c1"&gt;# Разрешаем сжатие трафика для всех проксированных запросов&lt;/span&gt;
  &lt;span class="kn"&gt;gzip_proxied&lt;/span&gt;       &lt;span class="s"&gt;any&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="c1"&gt;# Устанавливаем минимальную длину ответа, при которой нужно применять сжатие&lt;/span&gt;
  &lt;span class="kn"&gt;gzip_min_length&lt;/span&gt;    &lt;span class="mi"&gt;1000&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="c1"&gt;# Минимальная версия http для запроса, начиная с которой нужно применять сжатие&lt;/span&gt;
  &lt;span class="kn"&gt;gzip_http_version&lt;/span&gt;  &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="s"&gt;.0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="c1"&gt;# Число и размер буферов, в которые будет сжиматься ответ&lt;/span&gt;
  &lt;span class="kn"&gt;gzip_buffers&lt;/span&gt;       &lt;span class="mi"&gt;16&lt;/span&gt; &lt;span class="mi"&gt;8k&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="c1"&gt;# Уровень компрессии&lt;/span&gt;
  &lt;span class="kn"&gt;gzip_comp_level&lt;/span&gt;    &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="c1"&gt;# MIME-типы, для которых применять сжатие&lt;/span&gt;
  &lt;span class="kn"&gt;gzip_types&lt;/span&gt;         &lt;span class="s"&gt;text/plain&lt;/span&gt; &lt;span class="s"&gt;text/css&lt;/span&gt; &lt;span class="s"&gt;application/json&lt;/span&gt; &lt;span class="s"&gt;text/javascript&lt;/span&gt; &lt;span class="s"&gt;application/x-javascript&lt;/span&gt; &lt;span class="s"&gt;text/xml&lt;/span&gt; &lt;span class="s"&gt;application/xml&lt;/span&gt; &lt;span class="s"&gt;application/xml+rss&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="c1"&gt;# Подключаем дополнительные конфиги с хостами&lt;/span&gt;
  &lt;span class="kn"&gt;include&lt;/span&gt; &lt;span class="s"&gt;/etc/nginx/conf.d/*.conf&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;Теперь создадим хост:&lt;/p&gt;
&lt;table class="codehilitetable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="codehilite"&gt;&lt;pre&gt;mkdir /etc/nginx/conf.d &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; nano /etc/nginx/conf.d/home.conf
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;Пример конфига для отдачи статики:&lt;/p&gt;
&lt;table class="codehilitetable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="k"&gt;server&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kn"&gt;listen&lt;/span&gt;       &lt;span class="mi"&gt;80&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kn"&gt;server_name&lt;/span&gt;  &lt;span class="s"&gt;localhost&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="c1"&gt;# По умолчанию будем искать файл index.html&lt;/span&gt;
    &lt;span class="kn"&gt;index&lt;/span&gt; &lt;span class="s"&gt;index.html&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="c1"&gt;# Путь до корня хоста в файловой системы&lt;/span&gt;
    &lt;span class="kn"&gt;root&lt;/span&gt; &lt;span class="s"&gt;/var/www&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="c1"&gt;# Удаляем .html из адреса&lt;/span&gt;
    &lt;span class="kn"&gt;rewrite&lt;/span&gt; &lt;span class="s"&gt;^(/.+).html&lt;/span&gt;$ &lt;span class="nv"&gt;$scheme://$host$1&lt;/span&gt; &lt;span class="s"&gt;permanent&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="c1"&gt;# Пути до кастомных страниц с ошибками&lt;/span&gt;
    &lt;span class="kn"&gt;error_page&lt;/span&gt; &lt;span class="mi"&gt;404&lt;/span&gt; &lt;span class="s"&gt;/404.html&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kn"&gt;error_page&lt;/span&gt; &lt;span class="mi"&gt;500&lt;/span&gt; &lt;span class="mi"&gt;502&lt;/span&gt; &lt;span class="mi"&gt;503&lt;/span&gt; &lt;span class="mi"&gt;504&lt;/span&gt; &lt;span class="s"&gt;/50x.html&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="kn"&gt;location&lt;/span&gt; &lt;span class="s"&gt;/&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="c1"&gt;# Удаляем /index для директорий&lt;/span&gt;
        &lt;span class="kn"&gt;rewrite&lt;/span&gt; &lt;span class="s"&gt;^/(.*)/index&lt;/span&gt;$ &lt;span class="s"&gt;/&lt;/span&gt;&lt;span class="nv"&gt;$1&lt;/span&gt; &lt;span class="s"&gt;permanent&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

        &lt;span class="c1"&gt;# $uri/index.html для отдачи index.html из директории&lt;/span&gt;
        &lt;span class="c1"&gt;# $uri.html для отдачи .html файлов&lt;/span&gt;
        &lt;span class="c1"&gt;# $uri во всех остальных случаях будет искать файлы по имени как есть&lt;/span&gt;
        &lt;span class="kn"&gt;try_files&lt;/span&gt; &lt;span class="nv"&gt;$uri/index.html&lt;/span&gt; &lt;span class="nv"&gt;$uri.html&lt;/span&gt; &lt;span class="nv"&gt;$uri&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;404&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;Скачаем и&amp;nbsp;добавим в&amp;nbsp;автозагрузку скрипт управления демоном nginx:&lt;/p&gt;
&lt;table class="codehilitetable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1
2&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="codehilite"&gt;&lt;pre&gt;wget http://git.io/vs5QS -O /etc/init.d/nginx
chmod &lt;span class="m"&gt;755&lt;/span&gt; /etc/init.d/nginx &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; insserv -v /etc/init.d/nginx
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;И&amp;nbsp;стартуем сервер:&lt;/p&gt;
&lt;table class="codehilitetable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="codehilite"&gt;&lt;pre&gt;/etc/init.d/nginx start
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Дмитрий Харитонов</dc:creator><pubDate>Wed, 26 Aug 2015 17:00:00 +0300</pubDate><guid>tag:dkharitonov.me,2015-08-26:blog/nginx-setup</guid><category>nginx</category><category>nix</category></item><item><title>Делаем Raspberry Pi доступным из интернета при динамичном IP</title><link>http://dkharitonov.me/blog/yandex-dns-for-raspberry-pi</link><description>&lt;p&gt;Если вы&amp;nbsp;хотите сделать пай доступным извне по&amp;nbsp;доменному имени, у&amp;nbsp;вас не&amp;nbsp;статичный&amp;nbsp;IP и&amp;nbsp;есть, собственно, домен, который можно делегировать, то, как вариант, предлагаю воспользоваться сервисом от&amp;nbsp;Яндекса&amp;nbsp;&amp;mdash; &lt;a href="https://pdd.yandex.ru"&gt;Почта для домена&lt;/a&gt;. Помимо предоставления почты Яндекс позволяет настраивать DNS параметры домена через REST API&lt;span style="margin-right:0.3em;"&gt; &lt;/span&gt;&lt;span style="margin-left:-0.3em;"&gt;(&lt;/span&gt;бесплатно).&lt;/p&gt;
&lt;p&gt;Этим мы&amp;nbsp;и&amp;nbsp;воспользуемся, написав соответствующий скрипт, который будет автоматически обновлять&amp;nbsp;IP адрес пая в&amp;nbsp;DNS Яндекса. Для начала, конечно, домен должен быть делегирован Яндексу. &lt;a href="https://yandex.ru/support/pdd/hosting.xml"&gt;Тут&lt;/a&gt; написано как это сделать.&lt;/p&gt;
&lt;p&gt;Создадим скрипт:&lt;/p&gt;
&lt;table class="codehilitetable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="codehilite"&gt;&lt;pre&gt;mkdir ~/bin &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nb"&gt;cd&lt;/span&gt; ~/bin &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; nano ya_dns
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;Тело скрипта:&lt;/p&gt;
&lt;table class="codehilitetable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="c"&gt;#!/usr/bin/env bash&lt;/span&gt;

&lt;span class="c"&gt;# Использование:&lt;/span&gt;
&lt;span class="c"&gt;# ./ya_dns &amp;lt;id&amp;gt; &amp;lt;domain&amp;gt; &amp;lt;subdomain&amp;gt; &amp;lt;ttl&amp;gt;&lt;/span&gt;

&lt;span class="c"&gt;# Получим токен для доступа к API&lt;/span&gt;
&lt;span class="c"&gt;# Нужно заменить &amp;lt;yourdomain.com&amp;gt; на имя домена&lt;/span&gt;
&lt;span class="c"&gt;# https://pddimp.yandex.ru/token/index.xml?domain=&amp;lt;yourdomain.com&amp;gt;&lt;/span&gt;
&lt;span class="nv"&gt;token&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&amp;lt;put token here&amp;gt;&amp;quot;&lt;/span&gt;

&lt;span class="c"&gt;# Посмотреть информацию о DNS параметрах тут&lt;/span&gt;
&lt;span class="c"&gt;# Необходимо найти A запись для нужного домена/поддомена.&lt;/span&gt;
&lt;span class="c"&gt;# Для использования скрипта нужно узнать следующее: id, domain, subdomain, ttl&lt;/span&gt;
&lt;span class="c"&gt;# https://pddimp.yandex.ru/nsapi/get_domain_records.xml?token=&amp;lt;your_token_here&amp;gt;&amp;amp;domain=&amp;lt;yourdomain.com&amp;gt;&lt;/span&gt;

&lt;span class="c"&gt;# Подробнее про редактирование записи по API можно почитать тут:&lt;/span&gt;
&lt;span class="c"&gt;# https://tech.yandex.ru/pdd/doc/reference/dns-edit-docpage/&lt;/span&gt;

&lt;span class="nv"&gt;args&lt;/span&gt;&lt;span class="o"&gt;=(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="nv"&gt;$@&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;

&lt;span class="c"&gt;# Тут будем хранить IP&lt;/span&gt;
&lt;span class="nv"&gt;ip_file&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;/tmp/cur_ip.txt&amp;quot;&lt;/span&gt;

&lt;span class="nv"&gt;old_ip&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;cat &lt;span class="nv"&gt;$ip_file&lt;/span&gt;&lt;span class="k"&gt;)&lt;/span&gt;

&lt;span class="c"&gt;# Получим текущий IP&lt;/span&gt;
&lt;span class="nv"&gt;cur_ip&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;/usr/bin/curl -sL http://icanhazip.com&lt;span class="k"&gt;)&lt;/span&gt;

&lt;span class="c"&gt;# Если IP изменился с прошлого раза&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="nv"&gt;$cur_ip&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt; !&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="nv"&gt;$old_ip&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;]&lt;/span&gt;
&lt;span class="k"&gt;then&lt;/span&gt;
  &lt;span class="c"&gt;# Сохраним новый IP&lt;/span&gt;
  &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="nv"&gt;$cur_ip&lt;/span&gt; &amp;gt; &lt;span class="nv"&gt;$ip_file&lt;/span&gt;

  &lt;span class="nv"&gt;record_id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;args&lt;/span&gt;&lt;span class="p"&gt;[0]&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
  &lt;span class="nv"&gt;domain&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;args&lt;/span&gt;&lt;span class="p"&gt;[1]&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
  &lt;span class="nv"&gt;subdomain&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;args&lt;/span&gt;&lt;span class="p"&gt;[2]&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
  &lt;span class="nv"&gt;ttl&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;args&lt;/span&gt;&lt;span class="p"&gt;[3]&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;

  &lt;span class="c"&gt;# Обновим IP на яндексе&lt;/span&gt;
  &lt;span class="nv"&gt;ya_pdd_url&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;https://pddimp.yandex.ru/nsapi/edit_a_record.xml?&amp;quot;&lt;/span&gt;
  &lt;span class="nv"&gt;query_url&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;ya_pdd_url&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;token=&lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;token&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;&amp;amp;record_id=&lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;record_id&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;&amp;amp;domain=&lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;domain&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;&amp;amp;subdomain=&lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;subdomain&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;&amp;amp;ttl=&lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;ttl&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;&amp;amp;content=&lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;cur_ip&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;
  &lt;span class="nv"&gt;ya_pdd_response&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;/usr/bin/curl -sL &lt;span class="nv"&gt;$query_url&lt;/span&gt;&lt;span class="k"&gt;)&lt;/span&gt;

  &lt;span class="c"&gt;#echo $ya_pdd_response&lt;/span&gt;
&lt;span class="k"&gt;fi&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;Делаем скрипт исполняемым &lt;code&gt;chmod +x ./ya_dns&lt;/code&gt;, и&amp;nbsp;используем так: &lt;/p&gt;
&lt;table class="codehilitetable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="codehilite"&gt;&lt;pre&gt;./ya_dns &amp;lt;id&amp;gt; &amp;lt;domain&amp;gt; &amp;lt;subdomain&amp;gt; &amp;lt;ttl&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;Остается добавить его на&amp;nbsp;запуск по&amp;nbsp;расписанию: &lt;code&gt;crontab -e&lt;/code&gt;&lt;/p&gt;
&lt;table class="codehilitetable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1
2&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="c"&gt;# Запускать каждые 5 минут&lt;/span&gt;
*/5 * * * * /home/pi/bin/ya_dns &amp;lt;id&amp;gt; &amp;lt;domain&amp;gt; &amp;lt;subdomain&amp;gt; &amp;lt;ttl&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;Не&amp;nbsp;забудьте открыть нужные вам порты на&amp;nbsp;устройстве, с&amp;nbsp;помощью которого подключаетесь к&amp;nbsp;интернету.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;&lt;nobr&gt;P. S.&lt;/nobr&gt; Если у&amp;nbsp;вас нет домена, но&amp;nbsp;все&amp;nbsp;же хотите иметь доступ к&amp;nbsp;паю, можно переделать скрипт так, чтобы пай отправлял вам смс с&amp;nbsp;новым&amp;nbsp;IP&lt;span style="margin-right:0.3em;"&gt; &lt;/span&gt;&lt;span style="margin-left:-0.3em;"&gt;(&lt;/span&gt;например, через &lt;a href="http://sms.ru/?panel=main&amp;amp;subpanel=programmer"&gt;sms.ru&lt;/a&gt;). Или еще что-нибудь такое.&lt;/em&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Дмитрий Харитонов</dc:creator><pubDate>Tue, 25 Aug 2015 12:00:00 +0300</pubDate><guid>tag:dkharitonov.me,2015-08-25:blog/yandex-dns-for-raspberry-pi</guid><category>rpi</category><category>nix</category><category>dns</category><category>yandex</category></item><item><title>Вдумчивая настройка Raspberry Pi</title><link>http://dkharitonov.me/blog/raspberry-pi-setup</link><description>&lt;div class="toc"&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#toc_63316041064523f3b4740b01343c43e6"&gt;Скачиваем и&amp;nbsp;конфигурируем образ&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#toc_321d299e11f26fdecc5f3868b78d6f19"&gt;Записываем образ на&amp;nbsp;SD карту&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#toc_b89f1706b4c65978c762544a237c4fd6"&gt;Первоначальная настройка&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#toc_22061d9aae64f3048970888c10f0d056"&gt;Настраиваем SSH&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#toc_64ae2c3973c80573ea629fcaa91af970"&gt;Настраиваем авторизацию по&amp;nbsp;ключу&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#toc_baabdfee1ac9edc1bdb18ac8732f7749"&gt;Конфигурируем параметры пая&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#toc_551772c075bb90e516359f15b8d618fc"&gt;Повышаем производительность&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#toc_86b9010b372b4f02961008912b51a878"&gt;Убираем лишнее&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#toc_62c07b571c8df7d71f7bb5c2d0c888c9"&gt;Тюним файловую систему&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#toc_6b30cff589e3d9637aed14c0522c18c2"&gt;Логгируем в&amp;nbsp;оперативной памяти&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#toc_b94a67aec6e2351c725ca095b39816cd"&gt;Настраиваем фаервол&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#toc_de7e672a7e2cef4286d332c6d508ce04"&gt;Баним ботов пачками с&amp;nbsp;помощью fail2ban&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;UPD:&lt;/strong&gt; Обновлено для Raspberry Pi&amp;nbsp;2.&lt;/p&gt;
&lt;p&gt;Этот ман собирался мной в&amp;nbsp;течение длительного времени использования Raspberry Pi. Такая конфигурация подходит для организации простого веб-сервера, установки туда программ типа &lt;a href="https://syncthing.net"&gt;syncthing&lt;/a&gt;, XBMC, торрентокачалки &lt;nobr&gt;и т. п.&lt;/nobr&gt; В&amp;nbsp;общем, для домашнего использования.&lt;/p&gt;
&lt;h3 id="toc_63316041064523f3b4740b01343c43e6"&gt;Скачиваем и&amp;nbsp;конфигурируем образ&lt;/h3&gt;
&lt;p&gt;Детально про используемый образ можно почитать &lt;a href="https://github.com/debian-pi/raspbian-ua-netinst"&gt;в&amp;nbsp;репозитории проекта&lt;/a&gt;. Для начала необходимо узнать номер последней версии образа &lt;a href="https://github.com/debian-pi/raspbian-ua-netinst/releases/latest"&gt;тут&lt;/a&gt;.&lt;/p&gt;
&lt;table class="codehilitetable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="c"&gt;# Замените &amp;lt;version-number&amp;gt; на номер версии&lt;/span&gt;
&lt;span class="nv"&gt;rpi_inst_v&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;v&amp;lt;version-number&amp;gt;

&lt;span class="c"&gt;# Скачиваем образ&lt;/span&gt;
wget https://github.com/debian-pi/raspbian-ua-netinst/releases/download/&lt;span class="nv"&gt;$rpi_inst_v&lt;/span&gt;/raspbian-ua-netinst-&lt;span class="nv"&gt;$rpi_inst_v&lt;/span&gt;.zip

&lt;span class="c"&gt;# Разархивируем&lt;/span&gt;
unzip raspbian-ua-netinst-&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;rpi_inst_v&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;.zip -d ./raspbian-ua-netinst-&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;rpi_inst_v&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
&lt;span class="nb"&gt;cd &lt;/span&gt;raspbian-ua-netinst-&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;rpi_inst_v&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;

&lt;span class="c"&gt;# Укажем пароль (свой) для root пользователя&lt;/span&gt;
&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;rootpw=&amp;lt;password&amp;gt;&amp;quot;&lt;/span&gt; &amp;gt; ./installer-config.txt

&lt;span class="c"&gt;# (опционально) Указываем имя дистрибутива и дополнительные нужные вам пакеты&lt;/span&gt;
&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;release=wheezy&amp;quot;&lt;/span&gt; &amp;gt;&amp;gt; ./installer-config.txt
&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;packages=sudo,curl,nano&amp;quot;&lt;/span&gt; &amp;gt;&amp;gt; ./installer-config.txt
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;h3 id="toc_321d299e11f26fdecc5f3868b78d6f19"&gt;Записываем образ на&amp;nbsp;SD карту&lt;/h3&gt;
&lt;p&gt;Инструкция для&amp;nbsp;OS X. Всё это можно сделать и&amp;nbsp;через GUI.&lt;/p&gt;
&lt;table class="codehilitetable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="c"&gt;# Узнаём имя карточки (/dev/diskX, где X — число)&lt;/span&gt;
diskutil list

&lt;span class="c"&gt;# Форматируем в FAT 32&lt;/span&gt;
diskutil eraseDisk FAT32 RPI MBRFormat /dev/diskX

&lt;span class="c"&gt;# Копируем образ на карточку&lt;/span&gt;
cp -R ./* /Volumes/RPI

&lt;span class="c"&gt;# И извлекаем её&lt;/span&gt;
diskutil eject /dev/diskX
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;Теперь вставляем карту в&amp;nbsp;пай и&amp;nbsp;ждем. Если он&amp;nbsp;подключен к&amp;nbsp;телевизору, сможете наблюдать за&amp;nbsp;процессом. Если нет, можно посматривать на&amp;nbsp;лампочку Ethernet на&amp;nbsp;пае, и&amp;nbsp;когда она перестанет хаотично мигать, скорее всего можно идти дальше. Установка занимает минут 15.&lt;/p&gt;
&lt;h3 id="toc_b89f1706b4c65978c762544a237c4fd6"&gt;Первоначальная настройка&lt;/h3&gt;
&lt;table class="codehilitetable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="c"&gt;# Заходим на пай (пароль тот, что указали вначале)&lt;/span&gt;
ssh root@pi.ip.addr.ess

&lt;span class="c"&gt;# Обновим пакеты&lt;/span&gt;
apt-get -y update &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; apt-get -y dist-upgrade &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; apt-get -y autoremove &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; apt-get -y autoclean

&lt;span class="c"&gt;# Обновим ядро и прошивку&lt;/span&gt;
&lt;span class="c"&gt;# Не используйте утилиту rpi-update, она не работает с этим образом (https://github.com/debian-pi/raspbian-ua-netinst/issues/267)&lt;/span&gt;
&lt;span class="c"&gt;# Вместо этого воспользуемся пакетом raspberrypi-bootloader.&lt;/span&gt;
&lt;span class="c"&gt;# Он включает в себя ядро и прошивку. Это пакет проекта raspberry pi на github (https://github.com/raspberrypi/linux)&lt;/span&gt;
apt-get install -y raspberrypi-bootloader
sed -i &lt;span class="s1"&gt;&amp;#39;s/kernel=/#kernel=/g&amp;#39;&lt;/span&gt; /boot/config.txt
sed -i &lt;span class="s1"&gt;&amp;#39;s/initramfs /#initramfs /g&amp;#39;&lt;/span&gt; /boot/config.txt

&lt;span class="c"&gt;# Сконфигурируем локали и временную зону&lt;/span&gt;
dpkg-reconfigure locales
dpkg-reconfigure tzdata

&lt;span class="c"&gt;# Добавим нового пользователя&lt;/span&gt;
groupadd pi
useradd pi -m -K &lt;span class="nv"&gt;UMASK&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;0066&lt;/span&gt; -s /bin/bash -g pi -G users,ssh,sudo
passwd pi

&lt;span class="c"&gt;# Перезагрузимся, чтобы изменения вступили в силу&lt;/span&gt;
reboot

&lt;span class="c"&gt;# Теперь можно зайти на пай под новым пользователем&lt;/span&gt;
ssh pi@pi.ip.addr.ess
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;h3 id="toc_22061d9aae64f3048970888c10f0d056"&gt;Настраиваем SSH&lt;/h3&gt;
&lt;p&gt;Если смогли успешно войти под пользователем &lt;code&gt;pi&lt;/code&gt; на&amp;nbsp;предыдущем шаге, можно приступить к&amp;nbsp;дальшейшей настройке. Усилим безопасность системы.&lt;/p&gt;
&lt;table class="codehilitetable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="c"&gt;# Запретим входить под рутом&lt;/span&gt;
sudo sed -i &lt;span class="s1"&gt;&amp;#39;s/PermitRootLogin yes/PermitRootLogin no/g&amp;#39;&lt;/span&gt; /etc/ssh/sshd_config

&lt;span class="c"&gt;# Можно разрешить сессии только определенным юзерам&lt;/span&gt;
&lt;span class="c"&gt;# [ОПАСНАЯ ОПЦИЯ, проверьте правильность имен несколько раз]&lt;/span&gt;
&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;AllowUsers root pi&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; sudo tee --append /etc/ssh/sshd_config

&lt;span class="c"&gt;# Можно ограничить время бездействия пользовательской сессии (здесь 5 минут)&lt;/span&gt;
&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;ClientAliveInterval 300&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; sudo tee --append /etc/ssh/sshd_config &amp;gt; /dev/null
&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;ClientAliveCountMax 0&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; sudo tee --append /etc/ssh/sshd_config &amp;gt; /dev/null

&lt;span class="c"&gt;# Перезапустим SSH демон&lt;/span&gt;
sudo /etc/init.d/ssh restart
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;h4 id="toc_64ae2c3973c80573ea629fcaa91af970"&gt;Настраиваем авторизацию по&amp;nbsp;ключу&lt;/h4&gt;
&lt;table class="codehilitetable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="c"&gt;# На _своей_ машине сгенерируем ключ (если еще этого не делали)&lt;/span&gt;
&lt;span class="c"&gt;# Не оставляем пароль ключа пустым&lt;/span&gt;
mkdir .ssh
ssh-keygen -t rsa -C &lt;span class="s2"&gt;&amp;quot;your_email@example.com&amp;quot;&lt;/span&gt;
ssh-add ~/.ssh/id_rsa
&lt;span class="c"&gt;# Скопируем свой _публичный_ ключ в буфер обмена&lt;/span&gt;
pbcopy &amp;lt; ~/.ssh/id_rsa.pub

&lt;span class="c"&gt;# Дальнейшие действия делаем на пае под пользователем pi&lt;/span&gt;
mkdir ~/.ssh

&lt;span class="c"&gt;# Сюда вставим в новую строку скопированный публичный ключ&lt;/span&gt;
nano ~/.ssh/authorized_keys

&lt;span class="c"&gt;# Выставим правильные права&lt;/span&gt;
chmod &lt;span class="m"&gt;700&lt;/span&gt; ~/.ssh/
chmod &lt;span class="m"&gt;600&lt;/span&gt; ~/.ssh/authorized_keys

&lt;span class="c"&gt;# Пробуем выйти и зайти опять, должно пустить без пароля&lt;/span&gt;

&lt;span class="c"&gt;# Можно запретить вход по паролю, разрешить только по ключу&lt;/span&gt;
&lt;span class="c"&gt;# Нужно помнить, что в случае, если у нас не останется&lt;/span&gt;
&lt;span class="c"&gt;# ни одного авторизованного на пае ключа, по SSH войти не сможем&lt;/span&gt;
sudo sed -i &lt;span class="s1"&gt;&amp;#39;s/#PasswordAuthentication yes/PasswordAuthentication no/g&amp;#39;&lt;/span&gt; /etc/ssh/sshd_config
sudo sed -i &lt;span class="s1"&gt;&amp;#39;s/UsePAM yes/UsePAM no/g&amp;#39;&lt;/span&gt; /etc/ssh/sshd_config

&lt;span class="c"&gt;# Перезапустим SSH демон&lt;/span&gt;
sudo /etc/init.d/ssh restart
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;Всё дальнейшее&amp;nbsp;&amp;mdash; опционально&lt;span style="margin-right:0.3em;"&gt; &lt;/span&gt;&lt;span style="margin-left:-0.3em;"&gt;(&lt;/span&gt;впрочем, как и&amp;nbsp;всё, что выше). Ваши потребности естественно могут отличаться от&amp;nbsp;моих, поэтому выполняем команды &lt;em&gt;вдумчиво&lt;/em&gt;. Рекомендую для удобства действовать от&amp;nbsp;рута&lt;span style="margin-right:0.3em;"&gt; &lt;/span&gt;&lt;span style="margin-left:-0.3em;"&gt;(&lt;/span&gt;&lt;code&gt;su&amp;nbsp;root&lt;/code&gt;).&lt;/p&gt;
&lt;h3 id="toc_baabdfee1ac9edc1bdb18ac8732f7749"&gt;Конфигурируем параметры пая&lt;/h3&gt;
&lt;table class="codehilitetable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="c"&gt;# Выделяем минимальное количество видеопамяти&lt;/span&gt;
&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;gpu_mem=16&amp;quot;&lt;/span&gt; &amp;gt;&amp;gt; /boot/config.txt

&lt;span class="c"&gt;# Выключаем модуль камеры&lt;/span&gt;
&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;start_x=0&amp;quot;&lt;/span&gt; &amp;gt;&amp;gt; /boot/config.txt

&lt;span class="c"&gt;# Выключаем так называемые &amp;quot;вылеты развертки&amp;quot;, они не актуальны для современных телевизоров&lt;/span&gt;
&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;disable_overscan=1&amp;quot;&lt;/span&gt; &amp;gt;&amp;gt; /boot/config.txt

&lt;span class="c"&gt;# Разгоняем (подробно можно почитать тут http://elinux.org/RPiconfig)&lt;/span&gt;
&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;arm_freq=1000&amp;quot;&lt;/span&gt; &amp;gt;&amp;gt; /boot/config.txt
&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;core_freq=500&amp;quot;&lt;/span&gt; &amp;gt;&amp;gt; /boot/config.txt
&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;sdram_freq=500&amp;quot;&lt;/span&gt; &amp;gt;&amp;gt; /boot/config.txt
&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;over_voltage=2&amp;quot;&lt;/span&gt; &amp;gt;&amp;gt; /boot/config.txt

&lt;span class="c"&gt;# Форсируем Turbo режим в первые 60 секунд работы&lt;/span&gt;
&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;initial_turbo=60&amp;quot;&lt;/span&gt; &amp;gt;&amp;gt; /boot/config.txt

&lt;span class="c"&gt;# Делает так, чтобы пай разгонялся только при необходимости&lt;/span&gt;
&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;force_turbo=0&amp;quot;&lt;/span&gt; &amp;gt;&amp;gt; /boot/config.txt
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;h3 id="toc_551772c075bb90e516359f15b8d618fc"&gt;Повышаем производительность&lt;/h3&gt;
&lt;table class="codehilitetable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="c"&gt;# Улучшает производительность генератора случайных чисел&lt;/span&gt;
apt-get install -y rng-tools

&lt;span class="c"&gt;# Будет выдано сообщение о том, что скрипт не смог стартовать.&lt;/span&gt;
&lt;span class="c"&gt;# Ничего страшного, необходимый модуль станет доступен после перезагрузки&lt;/span&gt;
&lt;span class="nb"&gt;echo &lt;/span&gt;bcm2708-rng &amp;gt;&amp;gt; /etc/modules

&lt;span class="c"&gt;# Улучшает производительность служб управления памятью&lt;/span&gt;
apt-get install -y raspi-copies-and-fills

&lt;span class="c"&gt;# Можно настроить сеть на статику&lt;/span&gt;
&lt;span class="c"&gt;# [ОСТОРОЖНО, нужно быть уверенным в написанном, иначе можно потерять доступ по SSH]&lt;/span&gt;
&lt;span class="c"&gt;# Заменяем dhcp&lt;/span&gt;
sed -i &lt;span class="s1"&gt;&amp;#39;s/iface eth0 inet dhcp/#iface eth0 inet dhcp/g&amp;#39;&lt;/span&gt; /etc/network/interfaces
&lt;span class="c"&gt;# На что-то вроде такого, но специфичного для вашей сети&lt;/span&gt;
&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;iface eth0 inet static&amp;quot;&lt;/span&gt; &amp;gt;&amp;gt; /etc/network/interfaces
&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;address 192.168.1.100&amp;quot;&lt;/span&gt; &amp;gt;&amp;gt; /etc/network/interfaces
&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;gateway 192.168.1.1&amp;quot;&lt;/span&gt; &amp;gt;&amp;gt; /etc/network/interfaces
&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;netmask 255.255.255.0&amp;quot;&lt;/span&gt; &amp;gt;&amp;gt; /etc/network/interfaces
&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;network 192.168.1.0&amp;quot;&lt;/span&gt; &amp;gt;&amp;gt; /etc/network/interfaces
&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;broadcast 192.168.1.255&amp;quot;&lt;/span&gt; &amp;gt;&amp;gt; /etc/network/interfaces
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;h4 id="toc_86b9010b372b4f02961008912b51a878"&gt;Убираем лишнее&lt;/h4&gt;
&lt;table class="codehilitetable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="c"&gt;# Оставляем один getty, т.к. работаем в основном по SSH&lt;/span&gt;
sed -i &lt;span class="s1"&gt;&amp;#39;/[2-6]:23:respawn:\/sbin\/getty 38400 tty[2-6]/s%^%#%g&amp;#39;&lt;/span&gt; /etc/inittab
sed -i &lt;span class="s1"&gt;&amp;#39;/T0:23:respawn:\/sbin\/getty -L ttyAMA0 115200 vt100/s%^%#%g&amp;#39;&lt;/span&gt; /etc/inittab

&lt;span class="c"&gt;# Выключаем ipv6&lt;/span&gt;
&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;net.ipv6.conf.all.disable_ipv6=1&amp;quot;&lt;/span&gt; &amp;gt; /etc/sysctl.d/disableipv6.conf
sed -i &lt;span class="s1"&gt;&amp;#39;/::/s%^%#%g&amp;#39;&lt;/span&gt; /etc/hosts

&lt;span class="c"&gt;# Выключаем неиспользуемые модули ядра&lt;/span&gt;
&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;blacklist ipv6&amp;quot;&lt;/span&gt; &amp;gt;&amp;gt; /etc/modprobe.d/raspi-blacklist.conf
&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;blacklist spi-bcm2708&amp;quot;&lt;/span&gt; &amp;gt;&amp;gt; /etc/modprobe.d/raspi-blacklist.conf
&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;blacklist i2c-bcm2708&amp;quot;&lt;/span&gt; &amp;gt;&amp;gt; /etc/modprobe.d/raspi-blacklist.conf
chmod &lt;span class="m"&gt;644&lt;/span&gt; /etc/modprobe.d/raspi-blacklist.conf

&lt;span class="c"&gt;# Планировщик ввода/вывода &amp;quot;noop&amp;quot; лучше подходит для флеш памяти&lt;/span&gt;
sed -i &lt;span class="s1"&gt;&amp;#39;s/deadline/noop/g&amp;#39;&lt;/span&gt; /boot/cmdline.txt
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;h4 id="toc_62c07b571c8df7d71f7bb5c2d0c888c9"&gt;Тюним файловую систему&lt;/h4&gt;
&lt;table class="codehilitetable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="c"&gt;# noatime и nodiratime отключают запись информации&lt;/span&gt;
&lt;span class="c"&gt;# о последнем времени доступа к файлам и директориям&lt;/span&gt;
sed -i &lt;span class="s1"&gt;&amp;#39;s/errors=remount-ro,noatime /errors=remount-ro,noatime,nodiratime /g&amp;#39;&lt;/span&gt; /etc/fstab

&lt;span class="c"&gt;# Разрешаем автоматически восстанавливать файловые системы при загрузке,&lt;/span&gt;
&lt;span class="c"&gt;# если с ними что-то не так&lt;/span&gt;
sed -i &lt;span class="s2"&gt;&amp;quot;s/#FSCKFIX=no/FSCKFIX=yes/g&amp;quot;&lt;/span&gt; /etc/default/rcS

&lt;span class="c"&gt;# Каждые 3 перезагрузки проверяем главный раздел файловой системы&lt;/span&gt;
tune2fs -c &lt;span class="m"&gt;3&lt;/span&gt; /dev/mmcblk0p2

&lt;span class="c"&gt;# writeback тип записи в журнал дает больше производительности.&lt;/span&gt;
&lt;span class="c"&gt;# однако при падении системы данные могут потеряться&lt;/span&gt;
&lt;span class="c"&gt;# [ВЫПОЛНЯТЬ ТОЛЬКО С ПОНИМАНИЕМ РИСКОВ]&lt;/span&gt;
tune2fs -o journal_data_writeback /dev/mmcblk0p2

&lt;span class="c"&gt;# Перезагружаемся&lt;/span&gt;
reboot
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;h4 id="toc_6b30cff589e3d9637aed14c0522c18c2"&gt;Логгируем в&amp;nbsp;оперативной памяти&lt;/h4&gt;
&lt;p&gt;Это, во-первых, увеличит производительность, во-вторых, снизит нагрузку на&amp;nbsp;SD карту. Для этого воспользуемся утилитой &lt;a href="http://www.tremende.com/ramlog/"&gt;&lt;code&gt;ramlog&lt;/code&gt;&lt;/a&gt;. Но, если у&amp;nbsp;вас в&amp;nbsp;системе демонами рулит &lt;code&gt;systemd&lt;/code&gt;&lt;span style="margin-right:0.3em;"&gt; &lt;/span&gt;&lt;span style="margin-left:-0.3em;"&gt;(&lt;/span&gt;например, потому что вы&amp;nbsp;установили Debian 8 Jessie), то&amp;nbsp;ничего не&amp;nbsp;получится&amp;nbsp;&amp;mdash; &lt;code&gt;ramlog&lt;/code&gt;, по&amp;nbsp;крайней мере в&amp;nbsp;версии 2.0.0, не&amp;nbsp;совместим с&amp;nbsp;ним.&lt;/p&gt;
&lt;table class="codehilitetable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="c"&gt;# Скачиваем и устанавливаем ramlog&lt;/span&gt;
&lt;span class="nb"&gt;cd&lt;/span&gt; /tmp
wget http://www.tremende.com/ramlog/download/ramlog_2.0.0_all.deb
apt-get install -y lsof rsync &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; dpkg -i ramlog_2.0.0_all.deb

&lt;span class="c"&gt;# Задаем максимальный объем логов в памяти&lt;/span&gt;
sed -i &lt;span class="s1"&gt;&amp;#39;s/TMPFS_RAMFS_SIZE=\t/TMPFS_RAMFS_SIZE=40m\t/g&amp;#39;&lt;/span&gt; /etc/default/ramlog

&lt;span class="c"&gt;# Говорим, что ramlog надо запускать/останавливать до/после rsyslog&lt;/span&gt;
sed -i &lt;span class="s1"&gt;&amp;#39;s/# Provides: ramlog/# Provides: ramlog\n# X-Start-Before: rsyslog\n# X-Stop-After: rsyslog/g&amp;#39;&lt;/span&gt; /etc/init.d/ramlog

&lt;span class="c"&gt;# Дадим знать об этом автозагрузке&lt;/span&gt;
insserv -v /etc/init.d/ramlog

&lt;span class="c"&gt;# Теперь нужно 2 (!) раза перезагрузить пай&lt;/span&gt;
reboot

&lt;span class="c"&gt;# Проверить состояние ramlog можно так&lt;/span&gt;
/etc/init.d/ramlog status

&lt;span class="c"&gt;# Напоследок уберем абсолютно неважные логи крона про успешную авторизацию&lt;/span&gt;
sed -i &lt;span class="s1"&gt;&amp;#39;s/(the &amp;quot;Additional&amp;quot; block)/(the &amp;quot;Additional&amp;quot; block)\nsession [success=1 default=ignore] pam_succeed_if.so service in cron quiet use_uid/g&amp;#39;&lt;/span&gt; /etc/pam.d/common-session-noninteractive
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;h3 id="toc_b94a67aec6e2351c725ca095b39816cd"&gt;Настраиваем фаервол&lt;/h3&gt;
&lt;p&gt;Рекомендую не&amp;nbsp;полениться и&amp;nbsp;сконфигурировать фаервол&amp;nbsp;&amp;mdash; это хороший способ повысить безопасность системы. Установим &lt;code&gt;iptables&lt;/code&gt;&lt;span style="margin-right:0.3em;"&gt; &lt;/span&gt;&lt;span style="margin-left:-0.3em;"&gt;(&lt;/span&gt;утилиту для управления параметрами фаервола).&lt;/p&gt;
&lt;table class="codehilitetable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1
2
3
4
5
6&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="c"&gt;# Устанавливаем iptables&lt;/span&gt;
apt-get install -y iptables

&lt;span class="c"&gt;# Скачиваем скрипт для управления демоном&lt;/span&gt;
wget http://git.io/vs7i5 -O /etc/init.d/iptables
chmod &lt;span class="m"&gt;755&lt;/span&gt; /etc/init.d/iptables &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; insserv -v /etc/init.d/iptables
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;Теперь зададим несколько базовых правил &lt;code&gt;nano /etc/iptables.rules&lt;/code&gt;:&lt;/p&gt;
&lt;table class="codehilitetable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="codehilite"&gt;&lt;pre&gt;*filter

&lt;span class="c"&gt;# Принимаем все пакеты для loopback трафика&lt;/span&gt;
-A INPUT -i lo -j ACCEPT -m comment --comment &lt;span class="s2"&gt;&amp;quot;Allow all loopback traffic&amp;quot;&lt;/span&gt;

&lt;span class="c"&gt;# Запрещаем все, что на 127 сети и не использует loopback трафик&lt;/span&gt;
-A INPUT ! -i lo -d 127.0.0.0/8 -j REJECT -m comment --comment &lt;span class="s2"&gt;&amp;quot;Drop all traffic to 127 that doesnt use lo&amp;quot;&lt;/span&gt;

&lt;span class="c"&gt;# Принимаем все входящие пакеты от уже установленных соединений&lt;/span&gt;
-A INPUT -m conntrack --ctstate ESTABLISHED,RELATED -j ACCEPT -m comment --comment &lt;span class="s2"&gt;&amp;quot;Allow all incoming on established connections&amp;quot;&lt;/span&gt;

&lt;span class="c"&gt;# Разрешаем весь исходящий трафик&lt;/span&gt;
-A OUTPUT -j ACCEPT -m comment --comment &lt;span class="s2"&gt;&amp;quot;Accept all outgoing&amp;quot;&lt;/span&gt;

&lt;span class="c"&gt;# Разрешаем Ping&lt;/span&gt;
-A INPUT -p icmp -m icmp --icmp-type &lt;span class="m"&gt;8&lt;/span&gt; -j ACCEPT -m comment --comment &lt;span class="s2"&gt;&amp;quot;Allow Ping&amp;quot;&lt;/span&gt;

&lt;span class="c"&gt;# SSH &lt;/span&gt;
-A INPUT -p tcp -m tcp --dport &lt;span class="m"&gt;22&lt;/span&gt; -j ACCEPT

&lt;span class="c"&gt;# ... остальные нужные вам правила. По iptables очень много информации в сети&lt;/span&gt;

&lt;span class="c"&gt;# Все остальное отклонять. Эти две инструкции должны быть в конце файла&lt;/span&gt;
-A INPUT -j REJECT -m comment --comment &lt;span class="s2"&gt;&amp;quot;Reject all incoming&amp;quot;&lt;/span&gt;
-A FORWARD -j REJECT -m comment --comment &lt;span class="s2"&gt;&amp;quot;Reject all forwarded&amp;quot;&lt;/span&gt;

&lt;span class="c"&gt;# Говорим фаерволу применить инструкции&lt;/span&gt;
COMMIT
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;Также необходимо задать правила фаерволу &lt;em&gt;перед&lt;/em&gt; поднятием сетевых интерфейсов:&lt;/p&gt;
&lt;table class="codehilitetable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1
2&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="c"&gt;# Немного правим файл /etc/network/interfaces&lt;/span&gt;
sed -i &lt;span class="s1"&gt;&amp;#39;s/iface lo inet loopback/iface lo inet loopback\npre-up iptables-restore &amp;lt; \/etc\/iptables.rules/g&amp;#39;&lt;/span&gt; /etc/network/interfaces
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;Наконец, стартуем фаервол:&lt;/p&gt;
&lt;table class="codehilitetable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="codehilite"&gt;&lt;pre&gt;/etc/init.d/iptables start
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;h4 id="toc_de7e672a7e2cef4286d332c6d508ce04"&gt;Баним ботов пачками с&amp;nbsp;помощью fail2ban&lt;/h4&gt;
&lt;p&gt;Если ваш пай будет смотреть наружу в&amp;nbsp;интернет, то&amp;nbsp;в&amp;nbsp;него точно начнут ломиться боты. Если у&amp;nbsp;вас в&amp;nbsp;SSH настроена авторизация по&amp;nbsp;ключу и&amp;nbsp;отключена возможность входа по&amp;nbsp;паролю, то&amp;nbsp;смысла в&amp;nbsp;fail2ban не&amp;nbsp;слишком много. Однако он&amp;nbsp;может работать не&amp;nbsp;только с&amp;nbsp;SSH, а&amp;nbsp;со&amp;nbsp;многими утилитами, поэтому всё&amp;nbsp;же стоит рассмотреть вариант его применения. Да&amp;nbsp;и&amp;nbsp;вообще приятно в&amp;nbsp;логах видеть &lt;code&gt;NOTICE [ssh] fckn.bot.ip.addr already banned&lt;/code&gt; :)&lt;/p&gt;
&lt;table class="codehilitetable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="c"&gt;# Если не хотим заморачиваться с установкой последней версии fail2ban&lt;/span&gt;
&lt;span class="c"&gt;# то просто ставим пакет и переходим к следующему шагу&lt;/span&gt;
apt-get install -y fail2ban

&lt;span class="c"&gt;# Если хотим, будем ставить свежую версию из репозитория&lt;/span&gt;
&lt;span class="c"&gt;# fail2ban написан на питоне, поэтому нужно его установить&lt;/span&gt;
apt-get install -y python

&lt;span class="c"&gt;# Скачаем сам fail2ban&lt;/span&gt;
&lt;span class="c"&gt;# Можете посмотреть номер последней релизной версии тут&lt;/span&gt;
&lt;span class="c"&gt;# https://github.com/fail2ban/fail2ban/releases&lt;/span&gt;
&lt;span class="nb"&gt;cd&lt;/span&gt; /tmp
wget https://github.com/fail2ban/fail2ban/archive/0.9.3.tar.gz -O fail2ban.tar.gz

&lt;span class="c"&gt;# Разархивируем&lt;/span&gt;
mkdir fail2ban &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; tar -xzvf fail2ban.tar.gz -C ./fail2ban --strip-components&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nb"&gt;cd &lt;/span&gt;fail2ban

&lt;span class="c"&gt;# Установим&lt;/span&gt;
python setup.py install

&lt;span class="c"&gt;# Если iptables версии ниже 1.4.20 (проверить можно командой `iptables --version`)&lt;/span&gt;
&lt;span class="c"&gt;# необходимо выполнить эту команду&lt;/span&gt;
sed -i &lt;span class="s1"&gt;&amp;#39;s/lockingopt = -w/lockingopt = /g&amp;#39;&lt;/span&gt; /etc/fail2ban/action.d/iptables-common.conf

&lt;span class="c"&gt;# Скопируем скрипт для управления fail2ban демоном&lt;/span&gt;
cp ./files/debian-initd /etc/init.d/fail2ban
chmod &lt;span class="m"&gt;755&lt;/span&gt; /etc/init.d/fail2ban &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; insserv -v /etc/init.d/fail2ban
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;Теперь создадим конфиг &lt;code&gt;nano /etc/fail2ban/jail.local&lt;/code&gt; с&amp;nbsp;примерно таким текстом:&lt;/p&gt;
&lt;table class="codehilitetable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="o"&gt;[&lt;/span&gt;DEFAULT&lt;span class="o"&gt;]&lt;/span&gt;
&lt;span class="c"&gt;# Игнорировать запросы из нашей сети&lt;/span&gt;
&lt;span class="nv"&gt;ignoreip&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; 192.168.1.0/24

&lt;span class="c"&gt;# Наблюдаем за авторизацией по ssh&lt;/span&gt;
&lt;span class="c"&gt;# Я выставляю очень жесткие настройки, может быть разумнее сделать лояльнее&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;ssh&lt;span class="o"&gt;]&lt;/span&gt;
&lt;span class="nv"&gt;enabled&lt;/span&gt;  &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;true&lt;/span&gt;
&lt;span class="nv"&gt;port&lt;/span&gt;     &lt;span class="o"&gt;=&lt;/span&gt; ssh
&lt;span class="nv"&gt;filter&lt;/span&gt;   &lt;span class="o"&gt;=&lt;/span&gt; sshd
&lt;span class="nv"&gt;logpath&lt;/span&gt;  &lt;span class="o"&gt;=&lt;/span&gt; /var/log/auth.log
&lt;span class="c"&gt;# Наблюдать за IP в течение часа&lt;/span&gt;
&lt;span class="nv"&gt;findtime&lt;/span&gt;    &lt;span class="o"&gt;=&lt;/span&gt; 3600
&lt;span class="c"&gt;# Если 3 попытки входа неудачны&lt;/span&gt;
&lt;span class="nv"&gt;maxretry&lt;/span&gt;    &lt;span class="o"&gt;=&lt;/span&gt; 3
&lt;span class="c"&gt;# Бан на сутки&lt;/span&gt;
&lt;span class="nv"&gt;bantime&lt;/span&gt;     &lt;span class="o"&gt;=&lt;/span&gt; 86400
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;Наконец, перезагрузимся:&lt;/p&gt;
&lt;table class="codehilitetable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="codehilite"&gt;&lt;pre&gt;reboot
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;Логи, чтобы посмотреть успешно прошло или нет, лежат тут:&lt;/p&gt;
&lt;table class="codehilitetable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="codehilite"&gt;&lt;pre&gt;cat /var/log/fail2ban.log
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;На&amp;nbsp;этом, пожалуй, пока что остановимся. Спасибо, что дочитали :)&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Дмитрий Харитонов</dc:creator><pubDate>Mon, 24 Aug 2015 23:30:00 +0300</pubDate><guid>tag:dkharitonov.me,2015-08-24:blog/raspberry-pi-setup</guid><category>rpi</category><category>nix</category></item><item><title>Хороший JavaScript. Vol. 1 «Pimp your code»</title><link>http://dkharitonov.me/blog/nice-js-vol-1</link><description>&lt;p&gt;Как известно, JavaScript&amp;nbsp;&amp;mdash; язык-ошибка, язык-неочевидное поведение, язык-недоразумение. Причиной этому являлась необходимость в&amp;nbsp;середине 90 в&amp;nbsp;жесткие сроки получить мощный язык, позволяющий придать страницам больше возможностей. И&amp;nbsp;получили. Все проблемы&lt;span style="margin-right:0.3em;"&gt; &lt;/span&gt;&lt;span style="margin-left:-0.3em;"&gt;(&lt;/span&gt;повсеместные глобальные переменные, область видимости переменных, неочевидные и&amp;nbsp;нелогичные приведения типов) зашиты в&amp;nbsp;JS глубоко и&amp;nbsp;надолго. Сейчас к&amp;nbsp;нам приближается ES6, который явно, но&amp;nbsp;не&amp;nbsp;достаточно кардинально улучшает ситуацию.&lt;/p&gt;
&lt;p&gt;С&amp;nbsp;другой стороны язык очень гибок и&amp;nbsp;никто не&amp;nbsp;запрещает обходить плохие стороны, использовать хорошие и&amp;nbsp;улучшать язык своими силами. Этим я&amp;nbsp;и&amp;nbsp;займусь в&amp;nbsp;серии заметок. Неизгладимое впечатление на&amp;nbsp;меня произвела книга&lt;span style="margin-right:0.44em;"&gt; &lt;/span&gt;&lt;span style="margin-left:-0.44em;"&gt;&amp;laquo;&lt;/span&gt;&lt;a href="http://www.ozon.ru/context/detail/id/20217226/"&gt;JavaScript. Сильные стороны&lt;/a&gt;&amp;raquo; Дугласа Крокфорда, рекомендую к&amp;nbsp;прочтению&lt;span style="margin-right:0.3em;"&gt; &lt;/span&gt;&lt;span style="margin-left:-0.3em;"&gt;(&lt;/span&gt;она совсем небольшая).&lt;/p&gt;
&lt;h2 id="toc_d972ebc74a909f1b32a76cf3dd80a746"&gt;Объекты&lt;/h2&gt;
&lt;p&gt;Это один из&amp;nbsp;основных механизмов в&amp;nbsp;языке и, надо сказать, удачно реализованный. &lt;/p&gt;
&lt;p&gt;Всё&lt;span style="margin-right:0.3em;"&gt; &lt;/span&gt;&lt;span style="margin-left:-0.3em;"&gt;(&lt;/span&gt;ну, примитивы не&amp;nbsp;совсем объекты, они неизменяемы) в&amp;nbsp;JS&amp;nbsp;&amp;mdash; объект. Объекты обладают прототипом, который и&amp;nbsp;сам является объектом со&amp;nbsp;своим набором свойств. К&amp;nbsp;прототипам можно относиться как к&amp;nbsp;базовым объектам, задающим начальную функциональность другим объектам. Разные объекты могут иметь один и&amp;nbsp;тот&amp;nbsp;же прототип. Каждый раз при изменении прототипа у&amp;nbsp;объекта все другие объекты с&amp;nbsp;этим&amp;nbsp;же прототипом получают его обновленную версию. Это достигается за&amp;nbsp;счет того, что объекты содержат не&amp;nbsp;копию, а&amp;nbsp;ссылку на&amp;nbsp;прототип. Такая реализация способствует экономии памяти и&amp;nbsp;скорости работы.&lt;/p&gt;
&lt;p&gt;Помимо прототипа у&amp;nbsp;объекта есть свои, эксклюзивные свойства. Имя свойства может совпадать с&amp;nbsp;именем свойства в&amp;nbsp;прототипе. Ситуация разрешается просто: JS&amp;nbsp;сначала поищет запрашиваемое свойство в&amp;nbsp;списке личных свойств объекта, а&amp;nbsp;если не&amp;nbsp;найдет, пойдет искать по&amp;nbsp;цепочке прототипов в&amp;nbsp;их&amp;nbsp;свойствах.&lt;/p&gt;
&lt;p&gt;Что можно со&amp;nbsp;всем этим делать?&lt;/p&gt;
&lt;h2 id="toc_825117b30d21cab641d86125e8720255"&gt;Расширение функциональности на&amp;nbsp;лету&lt;/h2&gt;
&lt;p&gt;Как было сказано, почти все в&amp;nbsp;JS является объектом, в&amp;nbsp;том числе массивы&lt;span style="margin-right:0.3em;"&gt; &lt;/span&gt;&lt;span style="margin-left:-0.3em;"&gt;(&lt;/span&gt;ага). Мы&amp;nbsp;всегда можем добавить объекту новое свойство. Давайте попробуем использовать это себе во&amp;nbsp;благо. &lt;/p&gt;
&lt;p&gt;Например, имеем список абзацев с&amp;nbsp;текстом на&amp;nbsp;странице. Помимо самих DOM элементов мы&amp;nbsp;хотим хранить рядом с&amp;nbsp;ними какую-то метаинформацию&lt;span style="margin-right:0.3em;"&gt; &lt;/span&gt;&lt;span style="margin-left:-0.3em;"&gt;(&lt;/span&gt;к&amp;nbsp;примеру, UID абзаца). И&amp;nbsp;мы&amp;nbsp;должны уметь удалять и&amp;nbsp;вставлять абзацы в&amp;nbsp;произвольных местах. Работающий пример можно посмотреть &lt;a href="https://jsbin.com/qemaqo/edit?html,js,output"&gt;здесь&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Есть следующая страница:&lt;/p&gt;
&lt;table class="codehilitetable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="cp"&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;html&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;charset=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;utf-8&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;title&amp;gt;&lt;/span&gt;Расширение функциональности на лету&lt;span class="nt"&gt;&amp;lt;/title&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;content&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;script&amp;gt;&lt;/span&gt;
&lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;onload&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="c1"&gt;// ... здесь JS тот, что ниже в статье ...&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;Объявим массив, где будем хранить наши абзацы, и&amp;nbsp;опишем объект, который будет представлять абзац с&amp;nbsp;текстом и&amp;nbsp;дополнительной информацией.&lt;/p&gt;
&lt;table class="codehilitetable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;content&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;content&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;blocks&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[];&lt;/span&gt;

&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;block_factory&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;text&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;meta&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;node&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createElement&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;p&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nx"&gt;node&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;innerHTML&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;text&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;node&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;node&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;meta&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;meta&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;Наша цель&amp;nbsp;&amp;mdash; абстрагироваться от&amp;nbsp;работы с&amp;nbsp;DOM и&amp;nbsp;иметь дело только с&amp;nbsp;моделью данных. Чтобы осуществлять вставку и&amp;nbsp;удаление в&amp;nbsp;массиве хорошо подойдет стандартный метод &lt;a href="https://developer.mozilla.org/ru/docs/Web/JavaScript/Reference/Global_Objects/Array/splice"&gt;&lt;code&gt;splice&lt;/code&gt;&lt;/a&gt;. Но&amp;nbsp;есть проблема: нам всё-таки &lt;em&gt;нужно&lt;/em&gt; воздействовать на&amp;nbsp;DOM, чтобы изменения были видны &lt;nobr&gt;визуально :)&lt;/nobr&gt; Давайте &lt;em&gt;подправим&lt;/em&gt; метод &lt;code&gt;splice&lt;/code&gt;, но&amp;nbsp;только для массива &lt;code&gt;blocks&lt;/code&gt;:&lt;/p&gt;
&lt;table class="codehilitetable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="nx"&gt;blocks&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;splice&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;start&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;deleteCount&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;block&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;insert&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// Вставляем элемент на заданный индекс в DOM дереве&lt;/span&gt;
    &lt;span class="c1"&gt;// Текущий и последующие элементы будут сдвинуты «вперед»&lt;/span&gt;
    &lt;span class="nx"&gt;content&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;insertBefore&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;block&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;node&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;content&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;childNodes&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;start&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;

    &lt;span class="c1"&gt;// Эта конструкция вызывает оригинальный метод splice из прототипа массива&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;Array&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;prototype&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;splice&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;call&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;blocks&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;start&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;deleteCount&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;block&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;

  &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;remove&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// Вызываем оригинальный метод splice&lt;/span&gt;
    &lt;span class="c1"&gt;// Он возвращает новый массив с удаленными элементами&lt;/span&gt;
    &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;deleted&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;Array&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;prototype&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;splice&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;call&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;blocks&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;start&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;deleteCount&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;deleted&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;forEach&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;removed&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="c1"&gt;// Удаляем элемент из DOM&lt;/span&gt;
      &lt;span class="nx"&gt;content&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;removeChild&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;removed&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;node&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;deleted&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;

  &lt;span class="c1"&gt;// Вызываем функцию удаления или вставки в зависимости от аргументов&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;typeof&lt;/span&gt; &lt;span class="nx"&gt;block&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;undefined&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;?&lt;/span&gt; &lt;span class="nx"&gt;remove&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;insert&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;Для простоты реализации метод перестал поддерживать возможность вставки нескольких элементов разом. Ну&amp;nbsp;и&amp;nbsp;ладно.&lt;/p&gt;
&lt;p&gt;Теперь мы&amp;nbsp;можем работать с&amp;nbsp;моделью данных и&amp;nbsp;сразу видеть изменения в&amp;nbsp;DOM:&lt;/p&gt;
&lt;table class="codehilitetable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1
2
3
4
5&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="nx"&gt;blocks&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;splice&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;block_factory&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Первый абзац&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;uid&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="p"&gt;}));&lt;/span&gt;
&lt;span class="nx"&gt;blocks&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;splice&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;block_factory&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Второй абзац&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;uid&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="p"&gt;}));&lt;/span&gt;
&lt;span class="nx"&gt;blocks&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;splice&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;block_factory&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Третий абзац&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;uid&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt; &lt;span class="p"&gt;}));&lt;/span&gt;
&lt;span class="nx"&gt;blocks&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;splice&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;block_factory&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Теперь это второй абзац&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;uid&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt; &lt;span class="p"&gt;}));&lt;/span&gt;
&lt;span class="nx"&gt;blocks&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;splice&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// Удалим третий по счету абзац (с текстом &amp;#39;Второй абзац&amp;#39;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;Наш метод &lt;code&gt;splice&lt;/code&gt; не&amp;nbsp;затрагивает прототипный метод&lt;span style="margin-right:0.3em;"&gt; &lt;/span&gt;&lt;span style="margin-left:-0.3em;"&gt;(&lt;/span&gt;помните, выше я&amp;nbsp;писал, что у&amp;nbsp;объектов есть прототип, а&amp;nbsp;есть свои личные методы?), поэтому никаких проблем с&amp;nbsp;использование метода у&amp;nbsp;других массивов не&amp;nbsp;будет. Эта техника позволяет писать мощный, но&amp;nbsp;в&amp;nbsp;то&amp;nbsp;же время чистый, легко поддерживаемый код.&lt;/p&gt;
&lt;p&gt;Подобным образом можно добавлять недостающую функциональность и&amp;nbsp;к&amp;nbsp;прототипам объектов&lt;span style="margin-right:0.3em;"&gt; &lt;/span&gt;&lt;span style="margin-left:-0.3em;"&gt;(&lt;/span&gt;в&amp;nbsp;том числе стандартным):&lt;/p&gt;
&lt;table class="codehilitetable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1
2
3
4
5
6&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="c1"&gt;// Добавляем ко всем объектам типа String метод trim, если его нет&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;typeof&lt;/span&gt; &lt;span class="nb"&gt;String&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;prototype&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;trim&lt;/span&gt; &lt;span class="o"&gt;!==&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;function&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nb"&gt;String&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;prototype&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;trim&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;replace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sr"&gt;/^s+|s+$/g&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;В&amp;nbsp;следующей статье мы&amp;nbsp;продолжим работать с&amp;nbsp;прототипами и&amp;nbsp;посмотрим на&amp;nbsp;способы реализации наследования в&amp;nbsp;JavaScript.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Дмитрий Харитонов</dc:creator><pubDate>Thu, 20 Aug 2015 12:51:00 +0300</pubDate><guid>tag:dkharitonov.me,2015-08-20:blog/nice-js-vol-1</guid><category>js</category><category>series</category></item></channel></rss>